{
	"info": {
		"_postman_id": "aa9e2826-f41e-4473-bfac-05f836240265",
		"name": "HR-PROJECT",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5040522"
	},
	"item": [
		{
			"name": "POSITIVE TC",
			"item": [
				{
					"name": "LOGIN API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code = 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response description = OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is in JSON format\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type = application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time is < 1 second (1000 ms)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if token is valid\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.token).to.eql(\"QpwL5tke4Pnpja7X4\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/login",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "LIST USERS-2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code = 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response description = OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is in JSON format\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type = application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time is < 1 second (1000 ms)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"last_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"avatar\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if page=2 & per_page=6\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.page).to.eql(2); \r",
									"    pm.expect(jsonData.per_page).to.eql(6);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if first_name[4]=George\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[4].first_name).to.eql(\"George\"); \r",
									"});\r",
									"\r",
									"responseExtracted = pm.response.text();\r",
									"var count1 = (responseExtracted.match(/first_name/g) || []).length;\r",
									"console.log(\"The # of occurances of first_name is \" +count1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?page=2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SINGLE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code = 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response description = OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is in JSON format\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type = application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time is < 1 second (1000 ms)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"last_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"avatar\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if first_name=Charles\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.first_name).to.eql(\"Charles\"); \r",
									"    pm.expect(jsonData.data.last_name).to.eql(\"Morris\"); \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/5",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code = 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response description = Created\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is in JSON format\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type = application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time is < 1 second (1000 ms)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"job\");\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if first_name=Shiva Kumar\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Shiva Kumar\"); \r",
									"});\r",
									"\r",
									"// to extract id\r",
									"var myExtractedBody = JSON.parse(responseBody);\r",
									"var myExtractedID = myExtractedBody.id;\r",
									"pm.globals.set(\"globalID\", myExtractedID);\r",
									"\r",
									"// to extract name\r",
									"var myExtractedBody = JSON.parse(responseBody);\r",
									"var myExtractedName = myExtractedBody.name;\r",
									"pm.globals.set(\"globalName\", myExtractedName);\r",
									"\r",
									"// to extract job\r",
									"var myExtractedBody = JSON.parse(responseBody);\r",
									"myExtractedJob = myExtractedBody.job;\r",
									"pm.globals.set(\"globalJob\", myExtractedJob);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"job\": \"{{$randomJobType}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code = 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response description = OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is in JSON format\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type = application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time is < 1 second (1000 ms)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is valid\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"job\");\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if first_name=Shiva Kumar\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Shiva Kumar\"); \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{globalName}}\",\r\n    \"job\": \"Sr.{{globalJob}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users/{{globalID}}",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"{{globalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code = 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response description = No Content\", function () {\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is not present\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time is < 1 second (1000 ms)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/{{globalID}}",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"{{globalID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "NEGATIVE TC",
			"item": [
				{
					"name": "PAYLOAD TAMPERING-STRATEGY",
					"item": [
						{
							"name": "CREATE USER-JOB IS EMPTY",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});\r",
											"\r",
											"if (pm.response.code==400) {\r",
											"    console.log(\"Test Case Passed ; do not raise a bug\");\r",
											"}\r",
											"else {\r",
											"    // raise a bug in jira automatically\r",
											"    console.log(\"Test Case Failed ; raise a bug in JIRA\");\r",
											"    pm.globals.set(\"api_name_failed\", pm.info.requestName);\r",
											"    postman.setNextRequest(\"CREATE A BUG IN JIRA\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER-NAME IS EMPTY",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});\r",
											"\r",
											"if (pm.response.code==400) {\r",
											"    console.log(\"Test Case Passed ; do not raise a bug\");\r",
											"}\r",
											"else {\r",
											"    // raise a bug in jira automatically\r",
											"    console.log(\"Test Case Failed ; raise a bug in JIRA\");\r",
											"    pm.globals.set(\"api_name_failed\", pm.info.requestName);\r",
											"    postman.setNextRequest(\"CREATE A BUG IN JIRA\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"\",\r\n    \"job\": \"Leader\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER-NAME & JOB ARE EMPTY",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});\r",
											"\r",
											"if (pm.response.code==400) {\r",
											"    console.log(\"Test Case Passed ; do not raise a bug\");\r",
											"}\r",
											"else {\r",
											"    // raise a bug in jira automatically\r",
											"    console.log(\"Test Case Failed ; raise a bug in JIRA\");\r",
											"    pm.globals.set(\"api_name_failed\", pm.info.requestName);\r",
											"    postman.setNextRequest(\"CREATE A BUG IN JIRA\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"\",\r\n    \"job\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "QUERY PARAM TAMPERING",
					"item": [
						{
							"name": "LIST USERS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});\r",
											"\r",
											"if (pm.response.code==400) {\r",
											"    console.log(\"Test Case Passed ; do not raise a bug\");\r",
											"}\r",
											"else {\r",
											"    // raise a bug in jira automatically\r",
											"    console.log(\"Test Case Failed ; raise a bug in JIRA\");\r",
											"    pm.globals.set(\"api_name_failed\", pm.info.requestName);\r",
											"    postman.setNextRequest(\"CREATE A BUG IN JIRA\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://reqres.in/api/users?page=two",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "two"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LIST USERS-NEGATIVE PAGE NUMBER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});\r",
											"\r",
											"if (pm.response.code==400) {\r",
											"    console.log(\"Test Case Passed ; do not raise a bug\");\r",
											"}\r",
											"else {\r",
											"    // raise a bug in jira automatically\r",
											"    console.log(\"Test Case Failed ; raise a bug in JIRA\");\r",
											"    pm.globals.set(\"api_name_failed\", pm.info.requestName);\r",
											"    postman.setNextRequest(\"CREATE A BUG IN JIRA\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://reqres.in/api/users?page=-2",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "-2"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ENDPOINT TAMPERING",
					"item": [
						{
							"name": "SINGLE USER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});\r",
											"\r",
											"if (pm.response.code==400) {\r",
											"    console.log(\"Test Case Passed ; do not raise a bug\");\r",
											"}\r",
											"else {\r",
											"    // raise a bug in jira automatically\r",
											"    console.log(\"Test Case Failed ; raise a bug in JIRA\");\r",
											"    pm.globals.set(\"api_name_failed\", pm.info.requestName);\r",
											"    postman.setNextRequest(\"CREATE A BUG IN JIRA\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://reqres.in/api/users/two",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users",
										"two"
									]
								}
							},
							"response": []
						},
						{
							"name": "SINGLE USER-ID MISSING",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});\r",
											"\r",
											"if (pm.response.code==400) {\r",
											"    console.log(\"Test Case Passed ; do not raise a bug\");\r",
											"}\r",
											"else {\r",
											"    // raise a bug in jira automatically\r",
											"    console.log(\"Test Case Failed ; raise a bug in JIRA\");\r",
											"    pm.globals.set(\"api_name_failed\", pm.info.requestName);\r",
											"    postman.setNextRequest(\"CREATE A BUG IN JIRA\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://reqres.in/api/users/ ",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users",
										" "
									]
								}
							},
							"response": []
						},
						{
							"name": "SINGLE USER-ID EMPTY",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});\r",
											"\r",
											"if (pm.response.code==400) {\r",
											"    console.log(\"Test Case Passed ; do not raise a bug\");\r",
											"}\r",
											"else {\r",
											"    // raise a bug in jira automatically\r",
											"    console.log(\"Test Case Failed ; raise a bug in JIRA\");\r",
											"    pm.globals.set(\"api_name_failed\", pm.info.requestName);\r",
											"    postman.setNextRequest(\"CREATE A BUG IN JIRA\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://reqres.in/api/users/",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "HTTP METHOD TAMPERING",
					"item": [
						{
							"name": "UPDATE USER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});\r",
											"\r",
											"if (pm.response.code==400) {\r",
											"    console.log(\"Test Case Passed ; do not raise a bug\");\r",
											"}\r",
											"else {\r",
											"    // raise a bug in jira automatically\r",
											"    console.log(\"Test Case Failed ; raise a bug in JIRA\");\r",
											"    pm.globals.set(\"api_name_failed\", pm.info.requestName);\r",
											"    postman.setNextRequest(\"CREATE A BUG IN JIRA\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users/2",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE USER-HTTP METHOD TAMPERING",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});\r",
											"\r",
											"if (pm.response.code==400) {\r",
											"    console.log(\"Test Case Passed ; do not raise a bug\");\r",
											"}\r",
											"else {\r",
											"    // raise a bug in jira automatically\r",
											"    console.log(\"Test Case Failed ; raise a bug in JIRA\");\r",
											"    pm.globals.set(\"api_name_failed\", pm.info.requestName);\r",
											"    postman.setNextRequest(\"CREATE A BUG IN JIRA\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users/2",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users",
										"2"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "CONTENT TYPE TAMPERING",
					"item": [
						{
							"name": "CREATE USER-HTML FORMAT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});\r",
											"\r",
											"if (pm.response.code==400) {\r",
											"    console.log(\"Test Case Passed ; do not raise a bug\");\r",
											"}\r",
											"else {\r",
											"    // raise a bug in jira automatically\r",
											"    console.log(\"Test Case Failed ; raise a bug in JIRA\");\r",
											"    pm.globals.set(\"api_name_failed\", pm.info.requestName);\r",
											"    postman.setNextRequest(\"CREATE A BUG IN JIRA\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/html",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<!DOCTYPE html>\r\n<html>\r\n\t<head>\r\n\t\t<meta charset='UTF-8'>\r\n\t\t\t<title>JSON To HTML using codebeautify.org</title>\r\n\t\t</head>\r\n\t\t<body>\r\n\t\t\t<table border=1>\r\n\t\t\t\t<thead>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th>name</th>\r\n\t\t\t\t\t\t<th>job</th>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</thead>\r\n\t\t\t\t<tbody>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td>Kiran</td>\r\n\t\t\t\t\t\t<td>Trainer</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td></td>\r\n\t\t\t\t\t\t<td>&nbsp</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t</body>\r\n\t</html>",
									"options": {
										"raw": {
											"language": "html"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER-XML FORMAT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});\r",
											"\r",
											"if (pm.response.code==400) {\r",
											"    console.log(\"Test Case Passed ; do not raise a bug\");\r",
											"}\r",
											"else {\r",
											"    // raise a bug in jira automatically\r",
											"    console.log(\"Test Case Failed ; raise a bug in JIRA\");\r",
											"    pm.globals.set(\"api_name_failed\", pm.info.requestName);\r",
											"    postman.setNextRequest(\"CREATE A BUG IN JIRA\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<root>\r\n\t<name>Kiran</name>\r\n\t<job>Trainer</job>\r\n</root>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER-TEXT FORMAT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});\r",
											"\r",
											"if (pm.response.code==400) {\r",
											"    console.log(\"Test Case Passed ; do not raise a bug\");\r",
											"}\r",
											"else {\r",
											"    // raise a bug in jira automatically\r",
											"    console.log(\"Test Case Failed ; raise a bug in JIRA\");\r",
											"    pm.globals.set(\"api_name_failed\", pm.info.requestName);\r",
											"    postman.setNextRequest(\"CREATE A BUG IN JIRA\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/plain",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "name  job\r\nKiran  Trainer",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}